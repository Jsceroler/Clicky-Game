{"version":3,"sources":["components/image/Image.js","components/header/Header.js","App.js","registerServiceWorker.js","index.js"],"names":["Image","className","onClick","props","updateClicked","name","this","src","imgage","alt","React","Component","Header","id","score","hScore","App","state","clicked","indexOf","alert","setState","push","console","log","randomImage","newArr","length","jojos","jojo","Math","floor","random","href","rel","integrity","crossorigin","map","e","image","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ea093714.chunk.js","sourcesContent":["import React from 'react'\r\nimport './image.css'\r\n\r\nclass Image extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className='image-container'>\r\n                <img onClick={() => this.props.updateClicked(this.props.name)} name={this.props.name} className='ind-img' src={this.props.imgage} alt=\"\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Image;","import React from 'react'\r\nimport './header.css'\r\n\r\nclass Header extends React.Component {\r\n    \r\n    render(){\r\n        return(\r\n            <div className='header'>\r\n                <div id='home'>CLICKY GAME</div>\r\n                <div id='score'>\r\n                    <p>Score: {this.props.score}</p>\r\n                    <p id='hs'>High Score: {this.props.hScore}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","\r\nimport React, { Component } from 'react';\r\nimport Image from './components/image/Image'\r\nimport jojos from './jojo.json'\r\nimport Header from './components/header/Header'\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n  \r\n  state = {\r\n    clicked: [],\r\n    score: 0,\r\n    hScore: 0\r\n   }\r\n  \r\n  updateClicked = name => {\r\n    if(this.state.clicked.indexOf(name)>-1){\r\n      alert(\"Close. Try again.\")\r\n      this.setState({ clicked: [] })\r\n    \r\n      if(this.state.score > this.state.hScore){\r\n        this.setState({ hScore: this.state.score })\r\n      }\r\n\r\n      this.setState({ score: 0 })\r\n      \r\n      return;\r\n\r\n    } else {\r\n      var score = this.state.score;\r\n      score++;\r\n\r\n      if(score > this.state.hScore){\r\n        this.setState({ hScore: score })\r\n      }\r\n      this.setState({ score: score })\r\n    }\r\n\r\n    let clicked = this.state.clicked\r\n    clicked.push(name)    \r\n    this.setState({ clicked })\r\n    console.log(this.state.clicked)\r\n  }\r\n\r\n  randomImage = () => {\r\n    const newArr = [];\r\n      while(newArr.length !== jojos.length){\r\n        let jojo = jojos[Math.floor(Math.random()*jojos.length)];\r\n        if (newArr.indexOf(jojo)<0){\r\n          newArr.push(jojo)\r\n        }\r\n      }\r\n    return newArr\r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <div className=\"body\">\r\n        <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro\" rel=\"stylesheet\"/>\r\n        <script src=\"https://code.jquery.com/jquery-3.3.1.js\" integrity=\"sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=\" crossorigin=\"anonymous\"></script>  \r\n        <Header score={this.state.score} hScore={this.state.hScore}/>\r\n          { this.randomImage().map(e => \r\n              ( \r\n                <Image  updateClicked={this.updateClicked} \r\n                        name={e.name} \r\n                        imgage={e.image}/> \r\n              ))\r\n          }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}